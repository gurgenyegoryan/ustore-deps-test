name: Release

on:
  push:
    branches: ["main-dev"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  

permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  build_arm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'main-dev'

    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '11.3.Rel1'

    # - name: arm-none-eabi-gcc
    #   uses: ryanwinter/arm-none-eabi-gcc@master
    #   with:
    #     release: 10.3-2021.10
    - name: Install dependecies
      run: |
        sudo apt-get update 
        sudo apt-get install -y python3 python3-dev python3-pip cmake git build-essential
        # echo "AAAA" && ls /home/runner/gcc-arm-none-eabi-11.3.1-linux/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/lib/gcc/arm-none-eabi/11.3.1
        # echo "BBBB" && ls /usr/local/arm*
        whereis libpthread.so
    - name: Build conan package on ARM
      run: |
          git clone https://github.com/unum-cloud/ustore.git
          cd ustore/ && git checkout main-dev && git submodule update --init --recursive
          python -m pip install --force-reinstall conan==1.60.1
          sed -i 's/^\(.*\)cmake = CMake(self)/# \1cmake = CMake(self)/; s/^\(.*\)cmake.configure()/# \1cmake.configure()/; s/^\(.*\)cmake.build()/# \1cmake.build()\n       pass/' ./conanfile.py
          conan profile new --detect default
          gcc_path=$(which arm-none-eabi-gcc)
          g_path=$(which arm-none-eabi-g++)
          #export CC=$gcc_path
          #export CXX=$g_path
          sudo cp $(which arm-none-eabi-gcc) /usr/bin/arm-none-eabi-gcc
          sudo cp $(which arm-none-eabi-g++) /usr/bin/arm-none-eabi-g++
          sudo mv /usr/bin/arm-none-eabi-gcc /usr/bin/gcc
          sudo mv /usr/bin/arm-none-eabi-g++ /usr/bin/g++
          echo "AAAAAAAAAAAAAAAAAA" && gcc --version
          #export CMAKE_C_COMPILER=$gcc_path
          #export CMAKE_CXX_COMPILER=$g_path
          conan profile update settings.compiler.libcxx=libstdc++11 default
          # conan profile update settings.compiler=gcc default
          conan profile update settings.compiler.version=12 default
          conan profile update settings.arch_build=armv8 default
          conan profile update settings.arch=armv8 default
          export CC=$gcc_path
          export CXX=$g_path
          export LD_LIBRARY_PATH=/opt/hostedtoolcache/gcc-arm-none-eabi/10.3.2021.10/x64/gcc-arm-none-eabi-10.3-2021.10/bin/../lib:$LD_LIBRARY_PATH
          #export CFLAGS="-march=armv8-a -fPIC -l pthread" 
          export CXXFLAGS="-march=armv8-a -specs=nano.specs -specs=nosys.specs -specs=rdimon.specs"
          # export CXXFLAGS="-march=armv8-a"
          # export CFLAGS="--specs=nosys.specs ÖŠpthread"
          #export CXXFLAGS="-march=armv8-a -fPIC -l pthread"
          conan create . unum/arm_linux --build=missing
          cd ~/.conan && tar -czvf ustore_deps_arm_linux.tar.gz data/ && \
          mkdir archive/ && mv ustore_deps_arm_linux.tar.gz archive/
