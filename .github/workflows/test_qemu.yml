name: Release

on:
  push:
    branches: ["main-dev"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  

permissions:
  contents: write
  pages: write
  id-token: write


jobs:
  build_arm:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        ref: 'main-dev'

    # - name: To create an environmental variable with the toolchain path provide a name via the `path-env-var` input
    #   uses: carlosperate/arm-none-eabi-gcc-action@v1
    #   with:
    #     path-env-var: ARM_NONE_EABI_GCC_PATH
    #     release: 11.3.Rel1
    - name: The path will be exported to that environmental variable name
      run: echo "The output path is $ARM_NONE_EABI_GCC_PATH"

    # - name: arm-none-eabi-gcc
    #   uses: ryanwinter/arm-none-eabi-gcc@master
    #   with:
    #     release: 10.3-2021.10
    - name: Install dependecies
      run: |
        # gcc --version
        # sudo apt-get update 
        # sudo apt-get install -y python3 python3-dev python3-pip cmake git build-essential libpthread-stubs0-dev
        # echo "AAAA" && ls /home/runner/gcc-arm-none-eabi-11.3.1-linux/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/lib/gcc/arm-none-eabi/11.3.1
        # echo "BBBB" && ls /usr/local/arm*
        # whereis libpthread.so
        sudo apt-get update
        sudo dpkg --add-architecture armhf
        sudo apt-get update
        sudo apt-get install -y gcc-arm-linux-gnueabihf
        sudo apt-get install -y g++-arm-linux-gnueabihf
        export CROSS_COMPILE=arm-linux-gnueabihf-
        export CC=/usr/bin/arm-linux-gnueabihf-gcc-11
        export CXX=/usr/bin/arm-linux-gnueabihf-g++-11
        ln -s /usr/bin/arm-linux-gnueabihf-gcc-11 /usr/bin/gcc
        ln -s /usr/bin/arm-linux-gnueabihf-g++-11 /usr/bin/g++
        
    - name: Build conan package on ARM
      run: |
          git clone https://github.com/unum-cloud/ustore.git
          cd ustore/ && git checkout main-dev && git submodule update --init --recursive
          python -m pip install --force-reinstall conan==1.60.1
          sed -i 's/^\(.*\)cmake = CMake(self)/# \1cmake = CMake(self)/; s/^\(.*\)cmake.configure()/# \1cmake.configure()/; s/^\(.*\)cmake.build()/# \1cmake.build()\n       pass/' ./conanfile.py
          conan profile new --detect default
          # gcc_path=$(which arm-none-eabi-gcc)
          # g_path=$(which arm-none-eabi-g++)
          #export CC=$gcc_path
          #export CXX=$g_path
          # sudo cp $(which arm-none-eabi-gcc) /usr/bin/arm-none-eabi-gcc
          # sudo cp $(which arm-none-eabi-g++) /usr/bin/arm-none-eabi-g++
          # sudo mv /usr/bin/arm-none-eabi-gcc /usr/bin/gcc
          # sudo mv /usr/bin/arm-none-eabi-g++ /usr/bin/g++
          # echo "AAAAAAAAAAAAAAAAAA" && gcc --version
          #export CMAKE_C_COMPILER=$gcc_path
          #export CMAKE_CXX_COMPILER=$g_path
          conan profile update settings.compiler.libcxx=libstdc++11 default
          # conan profile update settings.compiler=gcc default
          conan profile update settings.compiler.version=11 default
          conan profile update settings.arch_build=armv8 default
          conan profile update settings.arch=armv8 default
          # echo "CONAN_CMAKE_FIND_ROOT_PATH=$ARM_NONE_EABI_GCC_PATH" >> ~/.conan/profiles/default
          # echo "CC=$ARM_NONE_EABI_GCC_PATH/arm-none-eabi-gcc" >> ~/.conan/profiles/default
          # echo "CXX=$ARM_NONE_EABI_GCC_PATH/arm-none-eabi-g++" >> ~/.conan/profiles/default
          # echo "CMAKE_HAVE_LIBC_PTHREAD=True" >> ~/.conan/profiles/default
          # export C_INCLUDE_PATH=$ARM_NONE_EABI_GCC_PATH/../include
          # export LD_LIBRARY_PATH=$ARM_NONE_EABI_GCC_PATH/../lib:$LD_LIBRARY_PATH
          # export CPLUS_INCLUDE_PATH=$ARM_NONE_EABI_GCC_PATH/../include
          # export CC=$gcc_path
          # export CXX=$g_path
          # export LD_LIBRARY_PATH=/opt/hostedtoolcache/gcc-arm-none-eabi/10.3.2021.10/x64/gcc-arm-none-eabi-10.3-2021.10/bin/../lib:$LD_LIBRARY_PATH
          # export CFLAGS="-march=armv8-a -fPIC" 
          # export CXXFLAGS="-march=armv8-a -specs=nano.specs -specs=nosys.specs -specs=rdimon.specs -l pthread"
          # unset CFLAGS
          # unset CXXFLAGS
          # export CFLAGS="-march=armv8-a"
          # export CFLAGS="--specs=nosys.specs pthread"
          # export CXXFLAGS="-march=armv8-a"
          conan create . unum/arm_linux --build=missing -pr:b=default
          cd ~/.conan && tar -czvf ustore_deps_arm_linux.tar.gz data/ && \
          mkdir archive/ && mv ustore_deps_arm_linux.tar.gz archive/
